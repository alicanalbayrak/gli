/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jgli;

import static jgli.detail.Format.getFormatInfo;

/**
 *
 * @author GBarbieri
 */
public enum Format {

    FORMAT_UNDEFINED,
    FORMAT_RG4_UNORM, FORMAT_FIRST(FORMAT_RG4_UNORM),
    FORMAT_RG4_USCALED,
    FORMAT_RGBA4_UNORM,
    FORMAT_RGBA4_USCALED,
    FORMAT_R5G6B5_UNORM,
    FORMAT_R5G6B5_USCALED,
    FORMAT_RGB5A1_UNORM,
    FORMAT_RGB5A1_USCALED,
    //
    FORMAT_R8_UNORM,
    FORMAT_R8_SNORM,
    FORMAT_R8_USCALED,
    FORMAT_R8_SSCALED,
    FORMAT_R8_UINT,
    FORMAT_R8_SINT,
    FORMAT_R8_SRGB,
    FORMAT_RG8_UNORM,
    FORMAT_RG8_SNORM,
    FORMAT_RG8_USCALED,
    FORMAT_RG8_SSCALED,
    FORMAT_RG8_UINT,
    FORMAT_RG8_SINT,
    FORMAT_RG8_SRGB,
    FORMAT_RGB8_UNORM,
    FORMAT_RGB8_SNORM,
    FORMAT_RGB8_USCALED,
    FORMAT_RGB8_SSCALED,
    FORMAT_RGB8_UINT,
    FORMAT_RGB8_SINT,
    FORMAT_RGB8_SRGB,
    FORMAT_RGBA8_UNORM,
    FORMAT_RGBA8_SNORM,
    FORMAT_RGBA8_USCALED,
    FORMAT_RGBA8_SSCALED,
    FORMAT_RGBA8_UINT,
    FORMAT_RGBA8_SINT,
    FORMAT_RGBA8_SRGB,
    FORMAT_RGB10A2_UNORM,
    FORMAT_RGB10A2_SNORM,
    FORMAT_RGB10A2_USCALED,
    FORMAT_RGB10A2_SSCALED,
    FORMAT_RGB10A2_UINT,
    FORMAT_RGB10A2_SINT,
    FORMAT_R16_UNORM,
    FORMAT_R16_SNORM,
    FORMAT_R16_USCALED,
    FORMAT_R16_SSCALED,
    FORMAT_R16_UINT,
    FORMAT_R16_SINT,
    FORMAT_R16_SFLOAT,
    FORMAT_RG16_UNORM,
    FORMAT_RG16_SNORM,
    FORMAT_RG16_USCALED,
    FORMAT_RG16_SSCALED,
    FORMAT_RG16_UINT,
    FORMAT_RG16_SINT,
    FORMAT_RG16_SFLOAT,
    FORMAT_RGB16_UNORM,
    FORMAT_RGB16_SNORM,
    FORMAT_RGB16_USCALED,
    FORMAT_RGB16_SSCALED,
    FORMAT_RGB16_UINT,
    FORMAT_RGB16_SINT,
    FORMAT_RGB16_SFLOAT,
    FORMAT_RGBA16_UNORM,
    FORMAT_RGBA16_SNORM,
    FORMAT_RGBA16_USCALED,
    FORMAT_RGBA16_SSCALED,
    FORMAT_RGBA16_UINT,
    FORMAT_RGBA16_SINT,
    FORMAT_RGBA16_SFLOAT,
    FORMAT_R32_UINT,
    FORMAT_R32_SINT,
    FORMAT_R32_SFLOAT,
    FORMAT_RG32_UINT,
    FORMAT_RG32_SINT,
    FORMAT_RG32_SFLOAT,
    FORMAT_RGB32_UINT,
    FORMAT_RGB32_SINT,
    FORMAT_RGB32_SFLOAT,
    FORMAT_RGBA32_UINT,
    FORMAT_RGBA32_SINT,
    FORMAT_RGBA32_SFLOAT,
    FORMAT_R64_SFLOAT,
    FORMAT_RG64_SFLOAT,
    FORMAT_RGB64_SFLOAT,
    FORMAT_RGBA64_SFLOAT,
    FORMAT_RG11B10_UFLOAT,
    FORMAT_RGB9E5_UFLOAT,
    FORMAT_D16_UNORM,
    FORMAT_D24_UNORM,
    FORMAT_D32_SFLOAT,
    FORMAT_S8_UINT,
    FORMAT_D16_UNORM_S8_UINT,
    FORMAT_D24_UNORM_S8_UINT,
    FORMAT_D32_SFLOAT_S8_UINT,
    //
    FORMAT_RGB_DXT1_UNORM,
    FORMAT_RGB_DXT1_SRGB,
    FORMAT_RGBA_DXT1_UNORM,
    FORMAT_RGBA_DXT1_SRGB,
    FORMAT_RGBA_DXT3_UNORM,
    FORMAT_RGBA_DXT3_SRGB,
    FORMAT_RGBA_DXT5_UNORM,
    FORMAT_RGBA_DXT5_SRGB,
    FORMAT_R_ATI1N_UNORM,
    FORMAT_R_ATI1N_SNORM,
    FORMAT_RG_ATI2N_UNORM,
    FORMAT_RG_ATI2N_SNORM,
    FORMAT_RGB_BP_UFLOAT,
    FORMAT_RGB_BP_SFLOAT,
    FORMAT_RGB_BP_UNORM,
    FORMAT_RGB_BP_SRGB,
    //
    FORMAT_RGB_ETC2_UNORM,
    FORMAT_RGB_ETC2_SRGB,
    FORMAT_RGBA_ETC2_A1_UNORM,
    FORMAT_RGBA_ETC2_A1_SRGB,
    FORMAT_RGBA_ETC2_UNORM,
    FORMAT_RGBA_ETC2_SRGB,
    FORMAT_R_EAC_UNORM,
    FORMAT_R_EAC_SNORM,
    FORMAT_RG_EAC_UNORM,
    FORMAT_RG_EAC_SNORM,
    FORMAT_ASTC_4x4_UNORM,
    FORMAT_ASTC_4x4_SRGB,
    FORMAT_ASTC_5x4_UNORM,
    FORMAT_ASTC_5x4_SRGB,
    FORMAT_ASTC_5x5_UNORM,
    FORMAT_ASTC_5x5_SRGB,
    FORMAT_ASTC_6x5_UNORM,
    FORMAT_ASTC_6x5_SRGB,
    FORMAT_ASTC_6x6_UNORM,
    FORMAT_ASTC_6x6_SRGB,
    FORMAT_ASTC_8x5_UNORM,
    FORMAT_ASTC_8x5_SRGB,
    FORMAT_ASTC_8x6_UNORM,
    FORMAT_ASTC_8x6_SRGB,
    FORMAT_ASTC_8x8_UNORM,
    FORMAT_ASTC_8x8_SRGB,
    FORMAT_ASTC_10x5_UNORM,
    FORMAT_ASTC_10x5_SRGB,
    FORMAT_ASTC_10x6_UNORM,
    FORMAT_ASTC_10x6_SRGB,
    FORMAT_ASTC_10x8_UNORM,
    FORMAT_ASTC_10x8_SRGB,
    FORMAT_ASTC_10x10_UNORM,
    FORMAT_ASTC_10x10_SRGB,
    FORMAT_ASTC_12x10_UNORM,
    FORMAT_ASTC_12x10_SRGB,
    FORMAT_ASTC_12x12_UNORM,
    FORMAT_ASTC_12x12_SRGB,
    //
    FORMAT_BGRA4_UNORM,
    FORMAT_BGRA4_USCALED,
    FORMAT_B5G6R5_UNORM,
    FORMAT_B5G6R5_USCALED,
    FORMAT_BGR5A1_UNORM,
    FORMAT_BGR5A1_USCALED,
    FORMAT_BGR8_UNORM,
    FORMAT_BGR8_SNORM,
    FORMAT_BGR8_USCALED,
    FORMAT_BGR8_SSCALED,
    FORMAT_BGR8_UINT,
    FORMAT_BGR8_SINT,
    FORMAT_BGR8_SRGB,
    FORMAT_BGRA8_UNORM,
    FORMAT_BGRA8_SNORM,
    FORMAT_BGRA8_USCALED,
    FORMAT_BGRA8_SSCALED,
    FORMAT_BGRA8_UINT,
    FORMAT_BGRA8_SINT,
    FORMAT_BGRA8_SRGB,
    FORMAT_BGR10A2_UNORM,
    FORMAT_BGR10A2_SNORM,
    FORMAT_BGR10A2_USCALED,
    FORMAT_BGR10A2_SSCALED,
    FORMAT_BGR10A2_UINT,
    FORMAT_BGR10A2_SINT,
    //
    FORMAT_RG3B2_UNORM,
    FORMAT_BGRX8_UNORM,
    FORMAT_BGRX8_SRGB,
    //
    FORMAT_L8_UNORM,
    FORMAT_A8_UNORM,
    FORMAT_LA8_UNORM,
    FORMAT_L16_UNORM,
    FORMAT_A16_UNORM,
    FORMAT_LA16_UNORM,
    //
    FORMAT_RGB_PVRTC1_8X8_UNORM,
    FORMAT_RGB_PVRTC1_8X8_SRGB,
    FORMAT_RGB_PVRTC1_16X8_UNORM,
    FORMAT_RGB_PVRTC1_16X8_SRGB,
    FORMAT_RGBA_PVRTC1_8X8_UNORM,
    FORMAT_RGBA_PVRTC1_8X8_SRGB,
    FORMAT_RGBA_PVRTC1_16X8_UNORM,
    FORMAT_RGBA_PVRTC1_16X8_SRGB,
    FORMAT_RGBA_PVRTC2_8X8_UNORM,
    FORMAT_RGBA_PVRTC2_8X8_SRGB,
    FORMAT_RGBA_PVRTC2_16X8_UNORM,
    FORMAT_RGBA_PVRTC2_16X8_SRGB,
    FORMAT_RGB_ETC_UNORM,
    FORMAT_RGB_ATC_UNORM,
    FORMAT_RGBA_ATC_EXPLICIT_UNORM,
    FORMAT_RGBA_ATC_INTERPOLATED_UNORM,
    FORMAT_LAST(FORMAT_RGBA_ATC_INTERPOLATED_UNORM),
    //    
    FORMAT_INVALID(-1),
    FORMAT_COUNT(FORMAT_LAST.value - FORMAT_FIRST.value + 1);

    public final int value;

    private Format() {
        value = Counter.nextValue;
        Counter.nextValue++;
    }

    private Format(Format e) {
        this.value = e.value;
    }

    private Format(int value) {
        this.value = value;
    }

    public boolean isValid() {
        return value >= FORMAT_FIRST.value && value <= FORMAT_LAST.value;
    }

    public int blockSize() {
        return getFormatInfo(this).blockSize;
    }

    public int[] blockDimensions() {
        return getFormatInfo(this).blockDimensions;
    }

    public int componentCount() {
        return getFormatInfo(this).component;
    }

    public static Format get(int value) {
        for (Format format : values()) {
            if (format.value == value) {
                return format;
            }
        }
        return FORMAT_INVALID;
    }

    /**
     * Trick to get automatic incremental values.
     */
    private static class Counter {

        private static int nextValue = 0;
    }
}
