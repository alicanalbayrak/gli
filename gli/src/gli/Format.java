/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gli;

import static gli.Format.Cap.*;
import static gli.Swizzles.Swizzle.*;

/**
 *
 * @author GBarbieri
 */
public enum Format {
// Texture data format
    FORMAT_UNDEFINED(0),
    //    
    FORMAT_RG4_UNORM_PACK8, FORMAT_FIRST(FORMAT_RG4_UNORM_PACK8),
    FORMAT_RGBA4_UNORM_PACK16,
    FORMAT_BGRA4_UNORM_PACK16,
    FORMAT_R5G6B5_UNORM_PACK16,
    FORMAT_B5G6R5_UNORM_PACK16,
    FORMAT_RGB5A1_UNORM_PACK16,
    FORMAT_BGR5A1_UNORM_PACK16,
    FORMAT_A1RGB5_UNORM_PACK16,
    //
    FORMAT_R8_UNORM_PACK8,
    FORMAT_R8_SNORM_PACK8,
    FORMAT_R8_USCALED_PACK8,
    FORMAT_R8_SSCALED_PACK8,
    FORMAT_R8_UINT_PACK8,
    FORMAT_R8_SINT_PACK8,
    FORMAT_R8_SRGB_PACK8,
    //
    FORMAT_RG8_UNORM_PACK8,
    FORMAT_RG8_SNORM_PACK8,
    FORMAT_RG8_USCALED_PACK8,
    FORMAT_RG8_SSCALED_PACK8,
    FORMAT_RG8_UINT_PACK8,
    FORMAT_RG8_SINT_PACK8,
    FORMAT_RG8_SRGB_PACK8,
    //
    FORMAT_RGB8_UNORM_PACK8,
    FORMAT_RGB8_SNORM_PACK8,
    FORMAT_RGB8_USCALED_PACK8,
    FORMAT_RGB8_SSCALED_PACK8,
    FORMAT_RGB8_UINT_PACK8,
    FORMAT_RGB8_SINT_PACK8,
    FORMAT_RGB8_SRGB_PACK8,
    //
    FORMAT_BGR8_UNORM_PACK8,
    FORMAT_BGR8_SNORM_PACK8,
    FORMAT_BGR8_USCALED_PACK8,
    FORMAT_BGR8_SSCALED_PACK8,
    FORMAT_BGR8_UINT_PACK8,
    FORMAT_BGR8_SINT_PACK8,
    FORMAT_BGR8_SRGB_PACK8,
    //
    FORMAT_RGBA8_UNORM_PACK8,
    FORMAT_RGBA8_SNORM_PACK8,
    FORMAT_RGBA8_USCALED_PACK8,
    FORMAT_RGBA8_SSCALED_PACK8,
    FORMAT_RGBA8_UINT_PACK8,
    FORMAT_RGBA8_SINT_PACK8,
    FORMAT_RGBA8_SRGB_PACK8,
    //
    FORMAT_BGRA8_UNORM_PACK8,
    FORMAT_BGRA8_SNORM_PACK8,
    FORMAT_BGRA8_USCALED_PACK8,
    FORMAT_BGRA8_SSCALED_PACK8,
    FORMAT_BGRA8_UINT_PACK8,
    FORMAT_BGRA8_SINT_PACK8,
    FORMAT_BGRA8_SRGB_PACK8,
    //
    FORMAT_RGBA8_UNORM_PACK32,
    FORMAT_RGBA8_SNORM_PACK32,
    FORMAT_RGBA8_USCALED_PACK32,
    FORMAT_RGBA8_SSCALED_PACK32,
    FORMAT_RGBA8_UINT_PACK32,
    FORMAT_RGBA8_SINT_PACK32,
    FORMAT_RGBA8_SRGB_PACK32,
    //
    FORMAT_RGB10A2_UNORM_PACK32,
    FORMAT_RGB10A2_SNORM_PACK32,
    FORMAT_RGB10A2_USCALED_PACK32,
    FORMAT_RGB10A2_SSCALED_PACK32,
    FORMAT_RGB10A2_UINT_PACK32,
    FORMAT_RGB10A2_SINT_PACK32,
    //
    FORMAT_BGR10A2_UNORM_PACK32,
    FORMAT_BGR10A2_SNORM_PACK32,
    FORMAT_BGR10A2_USCALED_PACK32,
    FORMAT_BGR10A2_SSCALED_PACK32,
    FORMAT_BGR10A2_UINT_PACK32,
    FORMAT_BGR10A2_SINT_PACK32,
    //
    FORMAT_R16_UNORM_PACK16,
    FORMAT_R16_SNORM_PACK16,
    FORMAT_R16_USCALED_PACK16,
    FORMAT_R16_SSCALED_PACK16,
    FORMAT_R16_UINT_PACK16,
    FORMAT_R16_SINT_PACK16,
    FORMAT_R16_SFLOAT_PACK16,
    //
    FORMAT_RG16_UNORM_PACK16,
    FORMAT_RG16_SNORM_PACK16,
    FORMAT_RG16_USCALED_PACK16,
    FORMAT_RG16_SSCALED_PACK16,
    FORMAT_RG16_UINT_PACK16,
    FORMAT_RG16_SINT_PACK16,
    FORMAT_RG16_SFLOAT_PACK16,
    //
    FORMAT_RGB16_UNORM_PACK16,
    FORMAT_RGB16_SNORM_PACK16,
    FORMAT_RGB16_USCALED_PACK16,
    FORMAT_RGB16_SSCALED_PACK16,
    FORMAT_RGB16_UINT_PACK16,
    FORMAT_RGB16_SINT_PACK16,
    FORMAT_RGB16_SFLOAT_PACK16,
    //
    FORMAT_RGBA16_UNORM_PACK16,
    FORMAT_RGBA16_SNORM_PACK16,
    FORMAT_RGBA16_USCALED_PACK16,
    FORMAT_RGBA16_SSCALED_PACK16,
    FORMAT_RGBA16_UINT_PACK16,
    FORMAT_RGBA16_SINT_PACK16,
    FORMAT_RGBA16_SFLOAT_PACK16,
    //
    FORMAT_R32_UINT_PACK32,
    FORMAT_R32_SINT_PACK32,
    FORMAT_R32_SFLOAT_PACK32,
    //
    FORMAT_RG32_UINT_PACK32,
    FORMAT_RG32_SINT_PACK32,
    FORMAT_RG32_SFLOAT_PACK32,
    //
    FORMAT_RGB32_UINT_PACK32,
    FORMAT_RGB32_SINT_PACK32,
    FORMAT_RGB32_SFLOAT_PACK32,
    //
    FORMAT_RGBA32_UINT_PACK32,
    FORMAT_RGBA32_SINT_PACK32,
    FORMAT_RGBA32_SFLOAT_PACK32,
    //
    FORMAT_R64_UINT_PACK64,
    FORMAT_R64_SINT_PACK64,
    FORMAT_R64_SFLOAT_PACK64,
    //
    FORMAT_RG64_UINT_PACK64,
    FORMAT_RG64_SINT_PACK64,
    FORMAT_RG64_SFLOAT_PACK64,
    //
    FORMAT_RGB64_UINT_PACK64,
    FORMAT_RGB64_SINT_PACK64,
    FORMAT_RGB64_SFLOAT_PACK64,
    //
    FORMAT_RGBA64_UINT_PACK64,
    FORMAT_RGBA64_SINT_PACK64,
    FORMAT_RGBA64_SFLOAT_PACK64,
    //
    FORMAT_RG11B10_UFLOAT_PACK32,
    FORMAT_RGB9E5_UFLOAT_PACK32,
    //
    FORMAT_D16_UNORM_PACK16,
    FORMAT_D24_UNORM_PACK32,
    FORMAT_D32_SFLOAT_PACK32,
    FORMAT_S8_UINT_PACK8,
    FORMAT_D16_UNORM_S8_UINT_PACK32,
    FORMAT_D24_UNORM_S8_UINT_PACK32,
    FORMAT_D32_SFLOAT_S8_UINT_PACK64,
    //
    FORMAT_RGB_DXT1_UNORM_BLOCK8,
    FORMAT_RGB_DXT1_SRGB_BLOCK8,
    FORMAT_RGBA_DXT1_UNORM_BLOCK8,
    FORMAT_RGBA_DXT1_SRGB_BLOCK8,
    FORMAT_RGBA_DXT3_UNORM_BLOCK16,
    FORMAT_RGBA_DXT3_SRGB_BLOCK16,
    FORMAT_RGBA_DXT5_UNORM_BLOCK16,
    FORMAT_RGBA_DXT5_SRGB_BLOCK16,
    FORMAT_R_ATI1N_UNORM_BLOCK8,
    FORMAT_R_ATI1N_SNORM_BLOCK8,
    FORMAT_RG_ATI2N_UNORM_BLOCK16,
    FORMAT_RG_ATI2N_SNORM_BLOCK16,
    FORMAT_RGB_BP_UFLOAT_BLOCK16,
    FORMAT_RGB_BP_SFLOAT_BLOCK16,
    FORMAT_RGBA_BP_UNORM_BLOCK16,
    FORMAT_RGBA_BP_SRGB_BLOCK16,
    //
    FORMAT_RGB_ETC2_UNORM_BLOCK8,
    FORMAT_RGB_ETC2_SRGB_BLOCK8,
    FORMAT_RGBA_ETC2_UNORM_BLOCK8,
    FORMAT_RGBA_ETC2_SRGB_BLOCK8,
    FORMAT_RGBA_ETC2_UNORM_BLOCK16,
    FORMAT_RGBA_ETC2_SRGB_BLOCK16,
    FORMAT_R_EAC_UNORM_BLOCK8,
    FORMAT_R_EAC_SNORM_BLOCK8,
    FORMAT_RG_EAC_UNORM_BLOCK16,
    FORMAT_RG_EAC_SNORM_BLOCK16,
    //
    FORMAT_RGBA_ASTC_4X4_UNORM_BLOCK16,
    FORMAT_RGBA_ASTC_4X4_SRGB_BLOCK16,
    FORMAT_RGBA_ASTC_5X4_UNORM_BLOCK16,
    FORMAT_RGBA_ASTC_5X4_SRGB_BLOCK16,
    FORMAT_RGBA_ASTC_5X5_UNORM_BLOCK16,
    FORMAT_RGBA_ASTC_5X5_SRGB_BLOCK16,
    FORMAT_RGBA_ASTC_6X5_UNORM_BLOCK16,
    FORMAT_RGBA_ASTC_6X5_SRGB_BLOCK16,
    FORMAT_RGBA_ASTC_6X6_UNORM_BLOCK16,
    FORMAT_RGBA_ASTC_6X6_SRGB_BLOCK16,
    FORMAT_RGBA_ASTC_8X5_UNORM_BLOCK16,
    FORMAT_RGBA_ASTC_8X5_SRGB_BLOCK16,
    FORMAT_RGBA_ASTC_8X6_UNORM_BLOCK16,
    FORMAT_RGBA_ASTC_8X6_SRGB_BLOCK16,
    FORMAT_RGBA_ASTC_8X8_UNORM_BLOCK16,
    FORMAT_RGBA_ASTC_8X8_SRGB_BLOCK16,
    FORMAT_RGBA_ASTC_10X5_UNORM_BLOCK16,
    FORMAT_RGBA_ASTC_10X5_SRGB_BLOCK16,
    FORMAT_RGBA_ASTC_10X6_UNORM_BLOCK16,
    FORMAT_RGBA_ASTC_10X6_SRGB_BLOCK16,
    FORMAT_RGBA_ASTC_10X8_UNORM_BLOCK16,
    FORMAT_RGBA_ASTC_10X8_SRGB_BLOCK16,
    FORMAT_RGBA_ASTC_10X10_UNORM_BLOCK16,
    FORMAT_RGBA_ASTC_10X10_SRGB_BLOCK16,
    FORMAT_RGBA_ASTC_12X10_UNORM_BLOCK16,
    FORMAT_RGBA_ASTC_12X10_SRGB_BLOCK16,
    FORMAT_RGBA_ASTC_12X12_UNORM_BLOCK16,
    FORMAT_RGBA_ASTC_12X12_SRGB_BLOCK16,
    //
    FORMAT_RGB_PVRTC1_8X8_UNORM_BLOCK32,
    FORMAT_RGB_PVRTC1_8X8_SRGB_BLOCK32,
    FORMAT_RGB_PVRTC1_16X8_UNORM_BLOCK32,
    FORMAT_RGB_PVRTC1_16X8_SRGB_BLOCK32,
    FORMAT_RGBA_PVRTC1_8X8_UNORM_BLOCK32,
    FORMAT_RGBA_PVRTC1_8X8_SRGB_BLOCK32,
    FORMAT_RGBA_PVRTC1_16X8_UNORM_BLOCK32,
    FORMAT_RGBA_PVRTC1_16X8_SRGB_BLOCK32,
    FORMAT_RGBA_PVRTC2_4X4_UNORM_BLOCK8,
    FORMAT_RGBA_PVRTC2_4X4_SRGB_BLOCK8,
    FORMAT_RGBA_PVRTC2_8X4_UNORM_BLOCK8,
    FORMAT_RGBA_PVRTC2_8X4_SRGB_BLOCK8,
    //
    FORMAT_RGB_ETC_UNORM_BLOCK8,
    FORMAT_RGB_ATC_UNORM_BLOCK8,
    FORMAT_RGBA_ATCA_UNORM_BLOCK16,
    FORMAT_RGBA_ATCI_UNORM_BLOCK16,
    //
    FORMAT_L8_UNORM_PACK8,
    FORMAT_A8_UNORM_PACK8,
    FORMAT_LA8_UNORM_PACK8,
    FORMAT_L16_UNORM_PACK16,
    FORMAT_A16_UNORM_PACK16,
    FORMAT_LA16_UNORM_PACK16,
    //
    FORMAT_BGR8_UNORM_PACK32,
    FORMAT_BGR8_SRGB_PACK32,
    //
    FORMAT_RG3B2_UNORM_PACK8, FORMAT_LAST(FORMAT_RG3B2_UNORM_PACK8),
    //                
    FORMAT_INVALID(-1),
    FORMAT_COUNT(FORMAT_LAST.value - FORMAT_FIRST.value + 1);

    public final int value;

    private Format() {
        value = Counter.nextValue;
        Counter.nextValue++;
    }

    private Format(Format e) {
        this.value = e.value;
    }

    private Format(int value) {
        this.value = value;
        Counter.nextValue++;
    }

    // Evaluate whether a format value is value or not
    public boolean isValid() {
        return value >= FORMAT_FIRST.value && value <= FORMAT_LAST.value;
    }

    public FormatInfo getFormatInfo() {

        if (!isValid()) {
            throw new Error("not valid format");
        }
        if (table.length != FORMAT_COUNT.value) {
            throw new Error("GLI error: format descriptor list doesn't match number of supported formats");
        }
        if (this == FORMAT_INVALID) {
            throw new Error("FORMAT_INVALID");
        }
        return table[value - FORMAT_FIRST.value];
    }

    public int bitsPerPixel() {

        FormatInfo info = getFormatInfo();

        return info.blockSize * 8 / (info.blockDimensions[0] * info.blockDimensions[1] * info.blockDimensions[2]);
    }

    // Evaluate whether a format is compressed
    public boolean isCompressed() {

        return (getFormatInfo().flags & CAP_COMPRESSED_BIT.value) != 0;
    }

    // Return the size in bytes of a block for a format.
    public int blockSize() {
        return getFormatInfo().blockSize;
    }

    // Return the dimensions in texels of the block for a format
    public short[] blockDimensions() {
        return getFormatInfo().blockDimensions;
    }

    // Return the number of components of a format
    public int componentCount() {
        return getFormatInfo().component;
    }

    public static Format get(int value) {
        for (Format format : values()) {
            if (format.value == value) {
                return format;
            }
        }
        return FORMAT_INVALID;
    }

    /**
     * Trick to get automatic incremental values.
     */
    private static class Counter {

        private static int nextValue = 0;
    }

    public enum Cap {

        CAP_COMPRESSED_BIT((short) (1 << 0)),
        CAP_COLORSPACE_SRGB_BIT((short) (1 << 1)),
        CAP_NORMALIZED_BIT((short) (1 << 2)),
        CAP_SCALED_BIT((short) (1 << 3)),
        CAP_UNSIGNED_BIT((short) (1 << 4)),
        CAP_SIGNED_BIT((short) (1 << 5)),
        CAP_INTEGER_BIT((short) (1 << 6)),
        CAP_FLOAT_BIT((short) (1 << 7)),
        CAP_DEPTH_BIT((short) (1 << 8)),
        CAP_STENCIL_BIT((short) (1 << 9)),
        CAP_SWIZZLE_BIT((short) (1 << 10)),
        CAP_LUMINANCE_ALPHA_BIT((short) (1 << 11)),
        CAP_PACKED8_BIT((short) (1 << 12)),
        CAP_PACKED16_BIT((short) (1 << 13)),
        CAP_PACKED32_BIT((short) (1 << 14)),
        CAP_DDS_GLI_EXT_BIT((short) (1 << 15));

        public final int value;

        private Cap(short value) {
            this.value = value;
        }
    }

    public class FormatInfo {

        public byte blockSize;
        public short[] blockDimensions;
        public byte component;
        public Swizzles swizzles;
        public short flags;

        public FormatInfo(
                int blockSize, int blockDimension, int component, Swizzles swizzles, Cap... flags) {
            this(
                    (byte) blockSize,
                    new short[]{(byte) blockDimension, (byte) blockDimension, (byte) blockDimension},
                    (byte) component, swizzles, flags);
        }

        public FormatInfo(
                byte blockSize, byte blockDimension, byte component, Swizzles swizzles, Cap... flags) {
            this(
                    blockSize, new short[]{blockDimension, blockDimension, blockDimension},
                    component, swizzles, flags);
        }

        public FormatInfo(
                int blockSize, int[] blockDimensions, int component, Swizzles swizzles, Cap... flags) {
            this(
                    (byte) blockSize,
                    new short[]{(byte) blockDimensions[0], (byte) blockDimensions[1], (byte) blockDimensions[2]},
                    (byte) component, swizzles, flags);
        }

        public FormatInfo(
                byte blockSize, byte[] blockDimensions, byte component, Swizzles swizzles, Cap... flags) {
            this(
                    blockSize, new short[]{blockDimensions[0], blockDimensions[1], blockDimensions[2]},
                    component, swizzles, flags);
        }

        public FormatInfo(
                byte blockSize, short[] blockDimensions, byte component, Swizzles swizzles, Cap... flags) {
            this.blockSize = blockSize;
            this.blockDimensions = blockDimensions;
            this.component = component;
            this.swizzles = swizzles;
            short totalFlags = 0;
            for (Cap cap : flags) {
                totalFlags = (short) (totalFlags | cap.value);
            }
            this.flags = totalFlags;
        }
    }

    private final FormatInfo[] table = new FormatInfo[]{
        new FormatInfo(1, 1, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_PACKED8_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_R4G4_UNORM,
        new FormatInfo(2, 1, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_PACKED16_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA4_UNORM,
        new FormatInfo(2, 1, 4, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_PACKED16_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_BGRA4_UNORM,
        new FormatInfo(2, 1, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_PACKED16_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_R5G6B5_UNORM,
        new FormatInfo(2, 1, 3, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ONE), CAP_PACKED16_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_B5G6R5_UNORM,
        new FormatInfo(2, 1, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_PACKED16_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB5A1_UNORM,
        new FormatInfo(2, 1, 4, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_PACKED16_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_BGR5A1_UNORM,
        new FormatInfo(2, 1, 4, new Swizzles(SWIZZLE_ALPHA, SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE), CAP_PACKED16_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_A1RGB5_UNORM,

        new FormatInfo(1, 1, 1, new Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_R8_UNORM,
        new FormatInfo(1, 1, 1, new Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_NORMALIZED_BIT, CAP_SIGNED_BIT), //FORMAT_R8_SNORM,
        new FormatInfo(1, 1, 1, new Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_SCALED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_R8_USCALED,
        new FormatInfo(1, 1, 1, new Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_SCALED_BIT, CAP_SIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_R8_SSCALED,
        new FormatInfo(1, 1, 1, new Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT, CAP_UNSIGNED_BIT), //FORMAT_R8_UINT,
        new FormatInfo(1, 1, 1, new Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT, CAP_SIGNED_BIT), //FORMAT_R8_SINT,
        new FormatInfo(1, 1, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_R8_SRGB,

        new FormatInfo(2, 1, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RG8_UNORM,
        new FormatInfo(2, 1, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_NORMALIZED_BIT, CAP_SIGNED_BIT), //FORMAT_RG8_SNORM,
        new FormatInfo(2, 1, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_SCALED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RG8_USCALED,
        new FormatInfo(2, 1, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_SCALED_BIT, CAP_SIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RG8_SSCALED,
        new FormatInfo(2, 1, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT, CAP_UNSIGNED_BIT), //FORMAT_RG8_UINT,
        new FormatInfo(2, 1, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT, CAP_SIGNED_BIT), //FORMAT_RG8_SINT,
        new FormatInfo(2, 1, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_NORMALIZED_BIT, CAP_SIGNED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RG8_SRGB,

        new FormatInfo(3, 1, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB8_UNORM,
        new FormatInfo(3, 1, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_NORMALIZED_BIT, CAP_SIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB8_SNORM,
        new FormatInfo(3, 1, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_SCALED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB8_USCALED,
        new FormatInfo(3, 1, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_SCALED_BIT, CAP_SIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB8_SSCALED,
        new FormatInfo(3, 1, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_INTEGER_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB8_UINT,
        new FormatInfo(3, 1, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_INTEGER_BIT, CAP_SIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB8_SINT,
        new FormatInfo(3, 1, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB8_SRGB,

        new FormatInfo(3, 1, 3, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ONE), CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_SWIZZLE_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_BGR8_UNORM,
        new FormatInfo(3, 1, 3, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ONE), CAP_NORMALIZED_BIT, CAP_SIGNED_BIT, CAP_SWIZZLE_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_BGR8_SNORM,
        new FormatInfo(3, 1, 3, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ONE), CAP_SCALED_BIT, CAP_UNSIGNED_BIT, CAP_SWIZZLE_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_BGR8_USCALED,
        new FormatInfo(3, 1, 3, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ONE), CAP_SCALED_BIT, CAP_SIGNED_BIT, CAP_SWIZZLE_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_BGR8_SSCALED,
        new FormatInfo(3, 1, 3, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ONE), CAP_INTEGER_BIT, CAP_UNSIGNED_BIT, CAP_SWIZZLE_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_BGR8_UINT,
        new FormatInfo(3, 1, 3, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ONE), CAP_INTEGER_BIT, CAP_SIGNED_BIT, CAP_SWIZZLE_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_BGR8_SINT,
        new FormatInfo(3, 1, 3, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ONE), CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_SWIZZLE_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_BGR8_SRGB,

        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA8_UNORM,
        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT, CAP_SIGNED_BIT), //FORMAT_RGBA8_SNORM,
        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_SCALED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA8_USCALED,
        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_SCALED_BIT, CAP_SIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA8_SSCALED,
        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_INTEGER_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA8_UINT,
        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_INTEGER_BIT, CAP_SIGNED_BIT), //FORMAT_RGBA8_SINT,
        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_COLORSPACE_SRGB_BIT), //FORMAT_RGBA8_SRGB_PACK32,

        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_SWIZZLE_BIT), //FORMAT_BGRA8_UNORM,
        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT, CAP_SIGNED_BIT, CAP_SWIZZLE_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_BGRA8_SNORM,
        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_SCALED_BIT, CAP_UNSIGNED_BIT, CAP_SWIZZLE_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_BGRA8_USCALED,
        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_SCALED_BIT, CAP_SIGNED_BIT, CAP_SWIZZLE_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_BGRA8_SSCALED,
        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_INTEGER_BIT, CAP_UNSIGNED_BIT, CAP_SWIZZLE_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_BGRA8_UINT,
        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_INTEGER_BIT, CAP_SIGNED_BIT, CAP_SWIZZLE_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_BGRA8_SINT,
        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_SWIZZLE_BIT), //FORMAT_BGRA8_SRGB,

        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_SWIZZLE_BIT, CAP_PACKED32_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB8_UNORM_PACK32,
        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT, CAP_SIGNED_BIT, CAP_SWIZZLE_BIT, CAP_PACKED32_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB8_SNORM_PACK32,
        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_SCALED_BIT, CAP_UNSIGNED_BIT, CAP_SWIZZLE_BIT, CAP_PACKED32_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB8_USCALED_PACK32,
        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_SCALED_BIT, CAP_SIGNED_BIT, CAP_SWIZZLE_BIT, CAP_PACKED32_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB8_SSCALED_PACK32,
        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_INTEGER_BIT, CAP_UNSIGNED_BIT, CAP_SWIZZLE_BIT, CAP_PACKED32_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB8_UINT_PACK32,
        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_INTEGER_BIT, CAP_SIGNED_BIT, CAP_SWIZZLE_BIT, CAP_PACKED32_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB8_SINT_PACK32,
        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_SWIZZLE_BIT, CAP_PACKED32_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB8_SRGB_PACK32,

        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_PACKED32_BIT), //FORMAT_RGB10A2_UNORM,
        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT, CAP_SIGNED_BIT, CAP_PACKED32_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB10A2_SNORM,
        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_SCALED_BIT, CAP_UNSIGNED_BIT, CAP_PACKED32_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB10A2_USCALE,
        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_SCALED_BIT, CAP_SIGNED_BIT, CAP_PACKED32_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB10A2_SSCALE,
        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_INTEGER_BIT, CAP_UNSIGNED_BIT, CAP_PACKED32_BIT), //FORMAT_RGB10A2_UINT,
        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_INTEGER_BIT, CAP_SIGNED_BIT, CAP_PACKED32_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB10A2_SINT,

        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_PACKED32_BIT, CAP_SWIZZLE_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_BGR10A2_UNORM,
        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT, CAP_SIGNED_BIT, CAP_PACKED32_BIT, CAP_SWIZZLE_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_BGR10A2_SNORM,
        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_SCALED_BIT, CAP_UNSIGNED_BIT, CAP_PACKED32_BIT, CAP_SWIZZLE_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_BGR10A2_USCALE,
        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_SCALED_BIT, CAP_SIGNED_BIT, CAP_PACKED32_BIT, CAP_SWIZZLE_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_BGR10A2_SSCALE,
        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_INTEGER_BIT, CAP_UNSIGNED_BIT, CAP_PACKED32_BIT, CAP_SWIZZLE_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_BGR10A2_UINT,
        new FormatInfo(4, 1, 4, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ALPHA), CAP_INTEGER_BIT, CAP_SIGNED_BIT, CAP_PACKED32_BIT, CAP_SWIZZLE_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_BGR10A2_SINT,

        new FormatInfo(2, 1, 1, new Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_R16_UNORM_PACK16,
        new FormatInfo(2, 1, 1, new Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_NORMALIZED_BIT, CAP_SIGNED_BIT), //FORMAT_R16_SNORM_PACK16,
        new FormatInfo(2, 1, 1, new Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_SCALED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_R16_USCALE,
        new FormatInfo(2, 1, 1, new Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_SCALED_BIT, CAP_SIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_R16_SSCALE,
        new FormatInfo(2, 1, 1, new Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT, CAP_UNSIGNED_BIT), //FORMAT_R16_UINT_PACK16,
        new FormatInfo(2, 1, 1, new Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT, CAP_SIGNED_BIT), //FORMAT_R16_SINT_PACK16,
        new FormatInfo(2, 1, 1, new Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_FLOAT_BIT, CAP_SIGNED_BIT), //FORMAT_R16_SFLOAT_PACK16,

        new FormatInfo(4, 1, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RG16_UNORM_PACK16,
        new FormatInfo(4, 1, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_NORMALIZED_BIT, CAP_SIGNED_BIT), //FORMAT_RG16_SNORM_PACK16,
        new FormatInfo(4, 1, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_SCALED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RG16_USCALE,
        new FormatInfo(4, 1, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_SCALED_BIT, CAP_SIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RG16_SSCALE,
        new FormatInfo(4, 1, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT, CAP_UNSIGNED_BIT), //FORMAT_RG16_UINT_PACK16,
        new FormatInfo(4, 1, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT, CAP_SIGNED_BIT), //FORMAT_RG16_SINT_PACK16,
        new FormatInfo(4, 1, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_FLOAT_BIT, CAP_SIGNED_BIT), //FORMAT_RG16_SFLOAT_PACK16,

        new FormatInfo(6, 1, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB16_UNORM_PACK16,
        new FormatInfo(6, 1, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_NORMALIZED_BIT, CAP_SIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB16_SNORM_PACK16,
        new FormatInfo(6, 1, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_SCALED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB16_USCALE,
        new FormatInfo(6, 1, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_SCALED_BIT, CAP_SIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB16_SSCALE,
        new FormatInfo(6, 1, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_INTEGER_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB16_UINT_PACK16,
        new FormatInfo(6, 1, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_INTEGER_BIT, CAP_SIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB16_SINT_PACK16,
        new FormatInfo(6, 1, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_FLOAT_BIT, CAP_SIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB16_SFLOAT_PACK16,

        new FormatInfo(8, 1, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA16_UNORM_PACK16,
        new FormatInfo(8, 1, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_NORMALIZED_BIT, CAP_SIGNED_BIT), //FORMAT_RGBA16_SNORM_PACK16,
        new FormatInfo(8, 1, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_SCALED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA16_USCALE,
        new FormatInfo(8, 1, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_SCALED_BIT, CAP_SIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA16_SSCALE,
        new FormatInfo(8, 1, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_INTEGER_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA16_UINT_PACK16,
        new FormatInfo(8, 1, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_INTEGER_BIT, CAP_SIGNED_BIT), //FORMAT_RGBA16_SINT_PACK16,
        new FormatInfo(8, 1, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_FLOAT_BIT, CAP_SIGNED_BIT), //FORMAT_RGBA16_SFLOAT_PACK16,

        new FormatInfo(4, 1, 1, new Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT, CAP_UNSIGNED_BIT), //FORMAT_R32_UINT_PACK32,
        new FormatInfo(4, 1, 1, new Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT, CAP_SIGNED_BIT), //FORMAT_R32_SINT_PACK32,
        new FormatInfo(4, 1, 1, new Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_FLOAT_BIT, CAP_SIGNED_BIT), //FORMAT_R32_SFLOAT_PACK32,

        new FormatInfo(8, 1, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT, CAP_UNSIGNED_BIT), //FORMAT_RG32_UINT_PACK32,
        new FormatInfo(8, 1, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT, CAP_SIGNED_BIT), //FORMAT_RG32_SINT_PACK32,
        new FormatInfo(8, 1, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_FLOAT_BIT, CAP_SIGNED_BIT), //FORMAT_RG32_SFLOAT_PACK32,

        new FormatInfo(12, 1, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_INTEGER_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGB32_UINT_PACK32,
        new FormatInfo(12, 1, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_INTEGER_BIT, CAP_SIGNED_BIT), //FORMAT_RGB32_SINT_PACK32,
        new FormatInfo(12, 1, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_FLOAT_BIT, CAP_SIGNED_BIT), //FORMAT_RGB32_SFLOAT_PACK32,

        new FormatInfo(16, 1, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_INTEGER_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA32_UINT_PACK32,
        new FormatInfo(16, 1, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_INTEGER_BIT, CAP_SIGNED_BIT), //FORMAT_RGBA32_SINT_PACK32,
        new FormatInfo(16, 1, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_FLOAT_BIT, CAP_SIGNED_BIT), //FORMAT_RGBA32_SFLOAT_PACK32,

        new FormatInfo(8, 1, 1, new Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_R64_UINT_PACK64,
        new FormatInfo(8, 1, 1, new Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT, CAP_SIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_R64_SINT_PACK64,
        new FormatInfo(8, 1, 1, new Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_FLOAT_BIT, CAP_SIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_R64_SFLOAT_PACK64,

        new FormatInfo(16, 1, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RG64_UINT_PACK64,
        new FormatInfo(16, 1, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_INTEGER_BIT, CAP_SIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RG64_SINT_PACK64,
        new FormatInfo(16, 1, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_FLOAT_BIT, CAP_SIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RG64_SFLOAT_PACK64,

        new FormatInfo(24, 1, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_INTEGER_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB64_UINT_PACK64,
        new FormatInfo(24, 1, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_INTEGER_BIT, CAP_SIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB64_SINT_PACK64,
        new FormatInfo(24, 1, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_FLOAT_BIT, CAP_SIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB64_SFLOAT_PACK64,

        new FormatInfo(32, 1, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_INTEGER_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA64_UINT_PACK64,
        new FormatInfo(32, 1, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_INTEGER_BIT, CAP_SIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA64_SINT_PACK64,
        new FormatInfo(32, 1, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_FLOAT_BIT, CAP_SIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA64_SFLOAT_PACK64,

        new FormatInfo(4, 1, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_PACKED32_BIT, CAP_FLOAT_BIT, CAP_SIGNED_BIT), //FORMAT_RG11B10_UFLOAT_PACK32,
        new FormatInfo(4, 1, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_PACKED32_BIT, CAP_FLOAT_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGB9E5_UFLOAT_PACK32,

        new FormatInfo(2, 1, 1, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_DEPTH_BIT, CAP_INTEGER_BIT), //FORMAT_D16_UNORM_PACK16,
        new FormatInfo(4, 1, 1, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_DEPTH_BIT, CAP_INTEGER_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_D24_UNORM_PACK32,
        new FormatInfo(4, 1, 1, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_DEPTH_BIT, CAP_FLOAT_BIT), //FORMAT_D32_UFLOAT_PACK32,
        new FormatInfo(1, 1, 1, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_DEPTH_BIT, CAP_STENCIL_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_S8_UNORM_PACK8,
        new FormatInfo(3, 1, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_DEPTH_BIT, CAP_INTEGER_BIT, CAP_STENCIL_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_D16_UNORM_S8_UINT_PACK32,
        new FormatInfo(4, 1, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_DEPTH_BIT, CAP_INTEGER_BIT, CAP_STENCIL_BIT), //FORMAT_D24_UNORM_S8_UINT_PACK32,
        new FormatInfo(5, 1, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_DEPTH_BIT, CAP_FLOAT_BIT, CAP_STENCIL_BIT), //FORMAT_D32_SFLOAT_S8_UINT_PACK64,

        new FormatInfo(8, new int[]{4, 4, 1}, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB_DXT1_UNORM_PACK8,
        new FormatInfo(8, new int[]{4, 4, 1}, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_COMPRESSED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB_DXT1_SRGB_PACK8,
        new FormatInfo(8, new int[]{4, 4, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_DXT1_UNORM_PACK8,
        new FormatInfo(8, new int[]{4, 4, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_DXT1_SRGB_PACK8,
        new FormatInfo(16, new int[]{4, 4, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_DXT3_UNORM_PACK16,
        new FormatInfo(16, new int[]{4, 4, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_DXT3_SRGB_PACK16,
        new FormatInfo(16, new int[]{4, 4, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_DXT5_UNORM_PACK16,
        new FormatInfo(16, new int[]{4, 4, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_DXT5_SRGB_PACK16,
        new FormatInfo(8, new int[]{4, 4, 1}, 1, new Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_R_ATI1N_UNORM_PACK8,
        new FormatInfo(8, new int[]{4, 4, 1}, 1, new Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_SIGNED_BIT), //FORMAT_R_ATI1N_SNORM_PACK8,
        new FormatInfo(16, new int[]{4, 4, 1}, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RG_ATI2N_UNORM_PACK16,
        new FormatInfo(16, new int[]{4, 4, 1}, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_SIGNED_BIT), //FORMAT_RG_ATI2N_SNORM_PACK16,
        new FormatInfo(16, new int[]{4, 4, 1}, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_COMPRESSED_BIT, CAP_FLOAT_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGB_BP_UFLOAT_PACK16,
        new FormatInfo(16, new int[]{4, 4, 1}, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_COMPRESSED_BIT, CAP_FLOAT_BIT, CAP_SIGNED_BIT), //FORMAT_RGB_BP_SFLOAT_PACK16,
        new FormatInfo(16, new int[]{4, 4, 1}, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGB_BP_UNORM_PACK16,
        new FormatInfo(16, new int[]{4, 4, 1}, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_COMPRESSED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGB_BP_SRGB_PACK16,

        new FormatInfo(8, new int[]{4, 4, 1}, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB_ETC2_UNORM_PACK8,
        new FormatInfo(8, new int[]{4, 4, 1}, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB_ETC2_SRGB_PACK8,
        new FormatInfo(8, new int[]{4, 4, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA_ETC2_PUNCHTHROUGH_UNORM_PACK8,
        new FormatInfo(8, new int[]{4, 4, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA_ETC2_PUNCHTHROUGH_SRGB_PACK8,
        new FormatInfo(16, new int[]{4, 4, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA_ETC2_UNORM_PACK16,
        new FormatInfo(16, new int[]{4, 4, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA_ETC2_SRGB_PACK16,
        new FormatInfo(8, new int[]{4, 4, 1}, 1, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_R11_EAC_UNORM_PACK8,
        new FormatInfo(8, new int[]{4, 4, 1}, 1, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_SIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_R11_EAC_SNORM_PACK8,
        new FormatInfo(16, new int[]{4, 4, 1}, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RG11_EAC_UNORM_PACK16,
        new FormatInfo(16, new int[]{4, 4, 1}, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_SIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RG11_EAC_SNORM_PACK16,

        new FormatInfo(16, new int[]{4, 4, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC4X4_UNORM_PACK16,
        new FormatInfo(16, new int[]{4, 4, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC4X4_SRGB_PACK16,
        new FormatInfo(16, new int[]{5, 4, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC5X4_UNORM_PACK16,
        new FormatInfo(16, new int[]{5, 4, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC5X4_SRGB_PACK16,
        new FormatInfo(16, new int[]{5, 5, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC5X5_UNORM_PACK16,
        new FormatInfo(16, new int[]{5, 5, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC5X5_SRGB_PACK16,
        new FormatInfo(16, new int[]{6, 5, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC6X5_UNORM_PACK16,
        new FormatInfo(16, new int[]{6, 5, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC6X5_SRGB_PACK16,
        new FormatInfo(16, new int[]{6, 6, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC6X6_UNORM_PACK16,
        new FormatInfo(16, new int[]{6, 6, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC6X6_SRGB_PACK16,
        new FormatInfo(16, new int[]{8, 5, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC8X5_UNORM_PACK16,
        new FormatInfo(16, new int[]{8, 5, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC8X5_SRGB_PACK16,
        new FormatInfo(16, new int[]{8, 6, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC8X6_UNORM_PACK16,
        new FormatInfo(16, new int[]{8, 6, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC8X6_SRGB_PACK16,
        new FormatInfo(16, new int[]{8, 8, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC8X8_UNORM_PACK16,
        new FormatInfo(16, new int[]{8, 8, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC8X8_SRGB_PACK16,
        new FormatInfo(16, new int[]{10, 5, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC10X5_UNORM_PACK16,
        new FormatInfo(16, new int[]{10, 5, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC10X5_SRGB_PACK16,
        new FormatInfo(16, new int[]{10, 6, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC10X6_UNORM_PACK16,
        new FormatInfo(16, new int[]{10, 6, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC10X6_SRGB_PACK16,
        new FormatInfo(16, new int[]{10, 8, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC10X8_UNORM_PACK16,
        new FormatInfo(16, new int[]{10, 8, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC10X8_SRGB_PACK16,
        new FormatInfo(16, new int[]{10, 10, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC10X10_UNORM_PACK16,
        new FormatInfo(16, new int[]{10, 10, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC10X10_SRGB_PACK16,
        new FormatInfo(16, new int[]{12, 10, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC12X10_UNORM_PACK16,
        new FormatInfo(16, new int[]{12, 10, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC12X10_SRGB_PACK16,
        new FormatInfo(16, new int[]{12, 12, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC12X12_UNORM_PACK16,
        new FormatInfo(16, new int[]{12, 12, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT), //FORMAT_RGBA_ASTC12X12_SRGB_PACK16,

        new FormatInfo(32, new int[]{8, 8, 1}, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB_PVRTC1_8X8_UNORM_BLOCK32,
        new FormatInfo(32, new int[]{8, 8, 1}, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_COMPRESSED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB_PVRTC1_8X8_SRGB_BLOCK32,
        new FormatInfo(32, new int[]{16, 8, 1}, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB_PVRTC1_16X8_UNORM_BLOCK32,
        new FormatInfo(32, new int[]{16, 8, 1}, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_COMPRESSED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB_PVRTC1_16X8_SRGB_BLOCK32,
        new FormatInfo(32, new int[]{8, 8, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA_PVRTC1_8X8_UNORM_BLOCK32,
        new FormatInfo(32, new int[]{8, 8, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA_PVRTC1_8X8_SRGB_BLOCK32,
        new FormatInfo(32, new int[]{16, 8, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA_PVRTC1_16X8_UNORM_BLOCK32,
        new FormatInfo(32, new int[]{16, 8, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA_PVRTC1_16X8_SRGB_BLOCK32,
        new FormatInfo(8, new int[]{4, 4, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA_PVRTC2_4X4_UNORM_BLOCK8,
        new FormatInfo(8, new int[]{4, 4, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA_PVRTC2_4X4_SRGB_BLOCK8,
        new FormatInfo(8, new int[]{8, 4, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA_PVRTC2_8X4_UNORM_BLOCK8,
        new FormatInfo(8, new int[]{8, 4, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_COLORSPACE_SRGB_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA_PVRTC2_8X4_SRGB_BLOCK8,

        new FormatInfo(8, new int[]{4, 4, 1}, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB_ETC_UNORM_BLOCK8,
        new FormatInfo(8, new int[]{4, 4, 1}, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGB_ATC_UNORM_BLOCK8,
        new FormatInfo(16, new int[]{4, 4, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA_ATC_EXPLICIT_UNORM_BLOCK16,
        new FormatInfo(16, new int[]{4, 4, 1}, 4, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ALPHA), CAP_COMPRESSED_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_RGBA_ATC_INTERPOLATED_UNORM_BLOCK16,

        new FormatInfo(1, 1, 1, new Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_LUMINANCE_ALPHA_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_L8_UNORM_BLOCK8,
        new FormatInfo(1, 1, 1, new Swizzles(SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_RED), CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_LUMINANCE_ALPHA_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_A8_UNORM_BLOCK8,
        new FormatInfo(2, 1, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_GREEN), CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_LUMINANCE_ALPHA_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_LA8_UNORM_BLOCK8,
        new FormatInfo(2, 1, 1, new Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ONE), CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_LUMINANCE_ALPHA_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_L16_UNORM_BLOCK16,
        new FormatInfo(2, 1, 1, new Swizzles(SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_RED), CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_LUMINANCE_ALPHA_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_A16_UNORM_BLOCK16,
        new FormatInfo(4, 1, 2, new Swizzles(SWIZZLE_RED, SWIZZLE_ZERO, SWIZZLE_ZERO, SWIZZLE_GREEN), CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_LUMINANCE_ALPHA_BIT, CAP_DDS_GLI_EXT_BIT), //FORMAT_LA16_UNORM_BLOCK16,

        new FormatInfo(4, 1, 3, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ONE), CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_SWIZZLE_BIT), //FORMAT_BGRX8_UNORM_BLOCK32,
        new FormatInfo(4, 1, 3, new Swizzles(SWIZZLE_BLUE, SWIZZLE_GREEN, SWIZZLE_RED, SWIZZLE_ONE), CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_SWIZZLE_BIT, CAP_COLORSPACE_SRGB_BIT), //FORMAT_BGRX8_SRGB_BLOCK32,

        new FormatInfo(1, 1, 3, new Swizzles(SWIZZLE_RED, SWIZZLE_GREEN, SWIZZLE_BLUE, SWIZZLE_ONE), CAP_PACKED8_BIT, CAP_NORMALIZED_BIT, CAP_UNSIGNED_BIT, CAP_DDS_GLI_EXT_BIT) //FORMAT_RG3B2_UNORM_BLOCK8,
    };
}
